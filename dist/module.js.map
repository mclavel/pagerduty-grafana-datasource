{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./datasource.ts","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MutableDataFrame,\n  FieldType,\n} from '@grafana/data';\n\nimport { MyQuery, MyDataSourceOptions, ListIncidentsResponse, Incident } from './types';\n\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\n\nimport { lastValueFrom } from 'rxjs';\n\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n  url?: string;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n    this.url = instanceSettings.url;\n    this.annotations = {};\n  }\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n    const { range } = options;\n    const from = range!.from.toISOString();\n    const to = range!.to.toISOString();\n\n    const promises = options.targets.map(async (target) => {\n      const frame = new MutableDataFrame({\n        refId: target.refId,\n        fields: [\n          { name: 'time', type: FieldType.time },\n          { name: 'timeEnd', type: FieldType.time },\n          { name: 'title', type: FieldType.string },\n          { name: 'text', type: FieldType.string },\n          { name: 'id', type: FieldType.string },\n        ],\n      });\n      const response = await this.doRequestPaginated(target, from, to, 25);\n\n      response.incidents.forEach((incident: Incident) => {\n        const timestamp: Date = new Date(incident.created_at);\n        const timestamp_end: Date = incident.resolved_at !== null ? new Date(incident.resolved_at) : new Date(to);\n        const createdAt = timestamp.getTime();\n        const resolvedAt = timestamp_end.getTime();\n        const title = incident.title;\n        const text = incident.summary;\n        const id = incident.incident_key;\n\n        frame.appendRow([createdAt, resolvedAt, title, text, id]);\n      });\n      return frame;\n    });\n\n    return Promise.all(promises).then((data) => ({ data: data }));\n  }\n\n  async doRequestPaginated(query: MyQuery, from: string, to: string, pageSize: number): Promise<ListIncidentsResponse> {\n    let listIncidentReponse: ListIncidentsResponse = { incidents: [], more: false };\n\n    let pageNumber = 0;\n    do {\n      const response = await this.doRequest(query, from, to, pageSize, pageNumber);\n      listIncidentReponse.incidents = Array.prototype.concat(listIncidentReponse.incidents, response.data.incidents);\n      listIncidentReponse.more = response.data.more;\n      pageNumber++;\n    } while (listIncidentReponse.more);\n    return listIncidentReponse;\n  }\n\n  async doRequest(\n    query: MyQuery,\n    from: string,\n    to: string,\n    pageSize: number,\n    pageNumber: number\n  ): Promise<FetchResponse<ListIncidentsResponse>> {\n    const routePath = '/pagerduty';\n\n    const result = getBackendSrv().fetch<ListIncidentsResponse>({\n      method: 'GET',\n      url: this.url + routePath + '/incidents',\n      params: {\n        'service_ids[]': query.serviceId === '' ? [] : [query.serviceId],\n        since: from,\n        until: to,\n        limit: pageSize,\n        offset: pageNumber * pageSize,\n      },\n      responseType: 'json',\n    });\n\n    return lastValueFrom(result);\n  }\n\n  async testDatasource() {\n    // Implement a health check for your data source.\n    try {\n      const testQuery = { serviceId: '', refId: '' };\n      const response = await this.doRequest(testQuery, '', '', 25, 0);\n      if (response.status === 200) {\n        return {\n          status: 'success',\n          message: 'Success!',\n        };\n      }\n      return {\n        status: 'error',\n        message: response.statusText,\n      };\n    } catch (err) {\n      return {\n        status: 'error',\n        message: 'Error contacting remote datasource, please check the API key provided.',\n      };\n    }\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { MyQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n\n  // Secure field (only sent to the backend)\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        apiKey: event.target.value,\n      },\n    });\n  };\n\n  const onResetAPIKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        apiKey: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        apiKey: '',\n      },\n    });\n  };\n\n  const { secureJsonFields } = options;\n  const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData;\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"API Key\" labelWidth={12}>\n        <SecretInput\n          isConfigured={(secureJsonFields && secureJsonFields.apiKey) as boolean}\n          value={secureJsonData.apiKey || ''}\n          placeholder=\"PagerDuty read-only api key\"\n          width={40}\n          onReset={onResetAPIKey}\n          onChange={onAPIKeyChange}\n        />\n      </InlineField>\n    </div>\n  );\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, MyQuery } from '../types';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport function QueryEditor({ query, onChange }: Props) {\n  const onServiceIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, serviceId: event.target.value });\n  };\n\n  const { serviceId } = query;\n\n  return (\n    <div className=\"gf-form\">\n      <InlineField label=\"Service Id\" labelWidth={16} tooltip=\"Not used yet\">\n        <Input onChange={onServiceIdChange} value={serviceId || ''} />\n      </InlineField>\n    </div>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DataSource","DataSourceApi","query","options","range","from","toISOString","to","promises","targets","map","target","frame","MutableDataFrame","refId","fields","name","type","FieldType","time","string","doRequestPaginated","incidents","forEach","incident","timestamp","Date","created_at","timestamp_end","resolved_at","createdAt","getTime","resolvedAt","title","text","summary","id","incident_key","appendRow","Promise","all","then","data","pageSize","listIncidentReponse","more","pageNumber","response","doRequest","Array","concat","result","getBackendSrv","fetch","method","url","params","serviceId","since","until","limit","offset","responseType","lastValueFrom","testDatasource","testQuery","status","message","statusText","err","constructor","instanceSettings","super","this","annotations","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","secureJsonFields","secureJsonData","div","className","InlineField","label","labelWidth","SecretInput","isConfigured","apiKey","placeholder","width","onReset","onChange","event","setQueryEditor","tooltip","Input"],"sourceRoot":""}